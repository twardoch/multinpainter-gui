#!/usr/bin/env bash
dir=${0%/*}
if [ "$dir" = "$0" ]; then dir="."; fi
cd "$dir" || exit

#VER=$(
#  perl -lne \
#    "print \$1 if /^__version__ = ['\"]([^'\"]*)['\"]/" \
#    "$APP/__init__.py"
#)

function brewapp() {
  if [ -z "$1" ]; then return; fi
  if [ -z "$2" ]; then
    local pkg=("$@")
  else
    shift
    local pkg=("$@")
  fi
  pkgbrew $pkg && return 1
}

function buildpy() {
  pp "## Building wheel"
  rm -rf dist/*
  $PYMAC setup.py sdist bdist_wheel
}

function buildmacdmg() {
  pp "## Building Mac DMG"
  cd "$cwd/app"
  dmgbuild -s dmgbuild_settings.py '' ''
  cd "$cwd"
}

function buildmac() {
  pp "## Building Mac APP"
  $PYMAC -m PyInstaller \
    --distpath="$cwd/app/build/dist-mac" \
    --workpath="$cwd/app/build" \
    -y "app/pyinstaller-mac.spec"
  rm -rf ./app/build/dist-mac/Multinpainter.app/Contents/Resources/matplotlib/*
  create-dmg ./app/build/dist-mac/Multinpainter.app
  #buildmacdmg
  #rm -rf "$cwd/app/build/dist-mac"
}

function buildwiniss() {
  pp "## Building Win EXE installer"
  $WINEMAC "$ISSEXE" /dMyAppVersion="$VER" app/$APP.iss /Q
}

function buildwinzip() {
  pp "## Building Win ZIP"
  rm -rf "download/$APP-win.zip" && zip -j \
    "download/$APP-win.zip" \
    "app/build/dist-win/setup_$APP_$VER.exe"
}

function buildwin() {
  pp "## Building Win EXE"
  $PYWIN -m pip install --user --upgrade -r requirements.txt
  $PYWIN -m pip install --user --upgrade .[dev]
  $PYWIN -m PyInstaller \
    --distpath="$cwd/app/build/dist-win" \
    --workpath="$cwd/app/build" \
    -y "app/pyinstaller-win.spec"
  buildwiniss
  buildwinzip
}

function build() {
  pp "## Pushing to Github"
  git add --all
  git commit -am "Build: v$version: $text"
  git pull
  git push

  buildpy
  buildmac
  buildwin
}

function clean() {
  pp "## Cleaning in $cwd"
  rm -rf "$cwd/build/*"
  rm -rf "$cwd/dist/*"
  rm -rf "$cwd/app/build/*"
}

function config() {
  echo "APP: $APP"
  echo "WINEPREFIX: $WINEPREFIX"
  echo "WINE32MAC: $WINE32MAC"
  echo "WINEMAC: $WINEMAC"
  echo "PYWIN: $PYWIN"
  echo "PYVER: $PYVER"
  echo "VER: $VER"
}

function getapp() {
  if [ -z "$1" ]; then
    return 2
  else
    command -v "$1" && return 0
  fi
}


function insbrew() {
  if [ ! -x "$(command -v brew)" ]; then
    pins "brew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

function init() {
  upx=$(getapp upx) || prep
  grealpath=$(getapp grealpath) || prep
  python3=$(getapp "$PYMAC") || prep
  cwd=$("$grealpath" "$dir")
}


function install() {
  pp "## Installing"
  $PYMAC -m pip install --user --upgrade -e .[dev]
}



function pins() {
  pp "Installing $1..."
}

function pkgbrew() {
  # Install package if not installed
  # $ pkgbrew go
  if [ -z "$1" ]; then return; else local pkg=$@; fi
  insbrew
  if [ -x "$(touch $(brew --prefix)/var/testX6mg87lk)" ]; then
    pwarn "$(brew) needs to fix permissions, enter your administrator password:"
    sudo chown -R $(whoami) $(brew --prefix)/*
    sudo chown $(whoami) $(brew --prefix)/*
    brew list -1 | while read pkg; do
      brew unlink "$pkg"
      brew link "$pkg"
    done
  else
    rm "$(brew --prefix)/var/testX6mg87lk"
  fi
  if [ "$1" == "--cask" ]; then
    local brewins="brew install --cask --no-quarantine"
    local brewupg="brew upgrade --cask --no-quarantine"
    local brewlist="brew list --cask"
    local pkg=${@:2}
  else
    local brewins="brew install"
    local brewupg="brew upgrade"
    local brewlist="brew list"
  fi
  if $brewlist --versions "$pkg" >/dev/null; then
    pup "$brewupg:$pkg"
    HOMEBREW_NO_AUTO_UPDATE=1 $brewupg "$pkg"
  else
    pins "$brewins:$pkg"
    HOMEBREW_NO_AUTO_UPDATE=1 $brewins "$pkg"
  fi
}

function perr() {
  echo
  echo -e "\e[91m[dist][ERROR] $1"
  echo
  exit
}

function pok() {
  echo
  echo -e "\e[92m[dist] $1"
  echo
}

function pp() {
  echo
  echo -e "[dist] $1"
  echo
}


function prepmac() {
  brewapp upx
  brewapp grealpath coreutils
  brewapp python3 python
  brewapp python-tk@3.10
  preppymac
  brewapp npm node
  npm install --global create-dmg
}

function preppymac() {
  pins "Python Mac packages"
  $PYMAC -m pip install --user --upgrade setuptools wheel pip
  $PYMAC -m pip install --user --upgrade -r requirements.txt
  $PYMAC -m pip install --user --upgrade -e .[dev]
}

function preppywin() {
  pins "Python Win packages"
  $PYWIN -m pip uninstall -y wxPython
  $PYWIN -m pip install --upgrade setuptools wheel pip
  $PYWIN -m pip install --upgrade -r requirements.txt
  $PYWIN -m pip install --upgrade -e .[dev]
}

function preppy() {
  preppymac
  preppywin
}

function prepwin() {
  rm -rf "$WINEPREFIX"
  brew tap gcenx/wine
  brewapp wine32on64 --cask wine-crossover
  brewapp winetricks
  winetricks -q dotnet48
  winetricks -q win10
  curl -L -o "$TMPDIR/vc.exe" https://download.visualstudio.microsoft.com/download/pr/1fbe074b-8ae1-4e9b-8e83-d1ce4200c9d1/2b2193b7736ec159b431aef7e7786f4084fba68921019577dc60ddc88308d18c/vs_Community.exe
  $WINEMAC "$TMPDIR/vc.exe" -q
  # winetricks -q vstools2019 vcrun2019
  if [ ! -f "$PYEXE" ]; then
    pins "wine py"
    curl -L -o "$TMPDIR/python.exe" https://www.python.org/ftp/python/$PYVER/python-$PYVER-amd64.exe &&
      $WINE32MAC "$TMPDIR/python.exe" /quiet &&
      rm "$TMPDIR/python.exe"
  fi
  if [ ! -f "$ISSEXE" ]; then
    pins "wine iss"
    curl -L -o "$TMPDIR/iss.exe" https://jrsoftware.org/download.php/is.exe &&
      $WINE32MAC "$TMPDIR/iss.exe" /VERYSILENT &&
      rm "$TMPDIR/iss.exe"
  fi
  preppywin
}

function prep() {
  prepmac
  prepwin
}

function publish() {
  [ -z "$2" ] && text="update" || text="$2"

  pp "## Pushing to Github"
  git add --all
  git commit -am "Release: v$version: $text"
  git pull
  git push

  branch=$(git rev-parse --abbrev-ref HEAD)
  token=$(git config --global github.token)

  repo_full_name=$(git config --get remote.origin.url)
  url=$repo_full_name
  re="^(https|git)(:\/\/|@)([^\/:]+)[\/:]([^\/:]+)\/(.+).git$"
  if [[ $url =~ $re ]]; then
    protocol=${BASH_REMATCH[1]}
    separator=${BASH_REMATCH[2]}
    hostname=${BASH_REMATCH[3]}
    user=${BASH_REMATCH[4]}
    repo=${BASH_REMATCH[5]}
  fi

  generate_post_data() {
    cat <<EOF
{
  "tag_name": "$version",
  "target_commitish": "$branch",
  "name": "$version",
  "body": "$text",
  "draft": false,
  "prerelease": false
}
EOF
  }

  pp "## Creating release $version for repo: $repo_full_name branch: $branch"
  curl --data "$(generate_post_data)" "https://api.github.com/repos/$user/$repo/releases?access_token=$token"

  echo
  echo "## Publishing on https://pypi.org/project/$APP/"
  echo "Enter your pypi.org login and password:"

  python3 -m twine upload --verbose -c "$text" dist/*
  open "https://pypi.org/project/$APP/"

  pp "## Pushing to Github"
  git add --all
  git commit -am "Published: v$VER: $text"
  git pull
  git push
}

function pup() {
  pp "Updating $1..."
}


function pwarn() {
  echo
  echo -e "\e[91m[dist][WARNING] $1"
  echo
}


#####

function temp() {
  #winetricks -q vstools2019 vcrun2019
  winetricks -q dotnet48
  winetricks -q win10
  curl -L -o "$TMPDIR/vc.exe" https://download.visualstudio.microsoft.com/download/pr/1fbe074b-8ae1-4e9b-8e83-d1ce4200c9d1/2b2193b7736ec159b431aef7e7786f4084fba68921019577dc60ddc88308d18c/vs_Community.exe
  $WINEMAC "$TMPDIR/vc.exe" -q
  #rm "$TMPDIR/vc.exe"
}

function usage() {
  echo "Usage: $0 command. Commands:"
  echo "prep: install prerequisites for building on macOS"
  echo "install: install the Python package"
  echo "buildmac: build the Mac distributable"
  echo "buildwin: build the Win distributable (uses Wine on macOS)"
  echo "build: build the Mac and Win distributables"
  echo "publish: publish a release (for maintainers only)"
  echo "all: prep, install, build, publish"
}

function all() {
  prep
  install
  clean
  build
  publish "$1"
}

function main() {
  init
  if [ $# -eq 0 ]; then
    usage
    exit $?
  fi

  case $1 in
  help)
    usage
    exit $?
    ;;
  init) init ;;
  clean) clean ;;
  config) config ;;
  prep) prep ;;
  preppymac) preppymac ;;
  preppywin) preppywin ;;
  preppy) preppy ;;
  prepmac) prepmac ;;
  prepwin) prepwin ;;
  install) install ;;
  build) build ;;
  buildpy) buildpy ;;
  buildmacdmg) buildmacdmg ;;
  buildmac) buildmac ;;
  buildwiniss) buildwiniss ;;
  buildwinzip) buildwinzip ;;
  buildwin) buildwin ;;
  temp) temp ;;
  publish) publish $@ ;;
  all) all $@ ;;
  esac
}

PYMAC="python3"

upx=$(getapp upx) || prep
grealpath=$(getapp grealpath) || prep
python3=$(getapp "$PYMAC") || prep
cwd=$("$grealpath" "$dir")

export WINEDEBUG="fixme-all,err-all"
APP="multinpainter"
export WINEPREFIX="$cwd/wine"
PYEXE="$WINEPREFIX/drive_c/windows/py.exe"
WINE32MAC="$(which wine32on64)"
WINEMAC="$(which wine64)"
ISSEXE="$WINEPREFIX/drive_c/Program Files (x86)/Inno Setup 6/ISCC.exe"
PYWIN="$WINEMAC $PYEXE"
PYVER="3.9.4"
VER=$(echo -e "import $APP.__init__\nprint($APP.__init__.__version__)" | "$PYMAC")

main $@
